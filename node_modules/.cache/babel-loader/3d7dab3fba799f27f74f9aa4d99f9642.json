{"ast":null,"code":"var _jsxFileName = \"/Users/yiyaoguo/Desktop/final-project-frontend/src/Comment.js\";\nimport React from \"react\";\nimport \"./style.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modal from \"./Modal\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction timeConverter(UNIX_timestamp) {\n  let x = new Date(UNIX_timestamp).toISOString().slice(0, 19).replace(\"T\", \" \");\n  return x;\n}\n\nfunction validate_form(name, comment) {\n  let errors = {\n    error_name: \"\",\n    error_comment: \"\"\n  };\n\n  if (name === \"\") {\n    errors.error_name = \"Commenter's name cannot be empty\";\n  }\n\n  if (comment === \"\") {\n    errors.error_comment = \"Comment cannot be empty\";\n  }\n\n  return errors;\n}\n\nexport default class Comment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCommentChange = event => {\n      this.setState({\n        comment: event.target.value\n      });\n    };\n\n    this.handleNameChange = event => {\n      this.setState({\n        name: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const name = this.state.name;\n      const comment = this.state.comment;\n      const errors = validate_form(name, comment);\n\n      if (errors.error_comment !== \"\" || errors.error_name !== \"\") {\n        this.setState({\n          errors: {\n            error_name: errors.error_name,\n            error_comment: errors.error_comment\n          }\n        });\n        return;\n      } else {\n        document.getElementById(\"root\").style.filter = \"blur(0px) grayscale(0%)\";\n        this.setState({\n          isModalOpen: false\n        });\n        fetch(\"https://itp404-final-project-backend.herokuapp.com/api/comments\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            name: this.state.name,\n            comment: this.state.comment,\n            //   time: Math.round(new Date().getTime() / 1000),\n            time: new Date().getTime(),\n            error_name: \"\",\n            error_comment: \"\"\n          }),\n          headers: {\n            \"Content-type\": \"application/json\"\n          }\n        }).then(response => {\n          return response.json();\n        }).then(json => {\n          toast.success(`Your comment was successfully sent`);\n          this.props.history.push(\"/\");\n          this.props.history.push(\"/comment\");\n        });\n      }\n    };\n\n    this.state = {\n      isModalOpen: false,\n      name: \"\",\n      comment: \"\",\n      time: \"\",\n      errors: {\n        error_name: \"\",\n        error_comment: \"\"\n      },\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    document.title = \"Comments\";\n    fetch(\"https://itp404-final-project-backend.herokuapp.com/api/comments\").then(response => {\n      return response.json();\n    }).then(json => {\n      this.setState({\n        data: json.sort((a, b) => a.time < b.time ? 1 : -1)\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        type: \"button\",\n        onClick: () => {\n          this.setState({\n            isModalOpen: true\n          });\n          document.getElementById(\"root\").style.filter = \"blur(5px)\";\n        },\n        children: \"Leave Your Comment Here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), this.state.isModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n        title: \"Add a comment\",\n        state: this.state,\n        onClose: () => {\n          document.getElementById(\"root\").style.filter = \"blur(0px) grayscale(0%)\";\n          this.setState({\n            isModalOpen: false,\n            name: \"\",\n            comment: \"\",\n            time: \"\",\n            errors: {\n              error_name: \"\",\n              error_comment: \"\"\n            }\n          });\n        },\n        handleSubmit: this.handleSubmit,\n        handleNameChange: this.handleNameChange,\n        handleCommentChange: this.handleCommentChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto align-center\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-striped\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"col\",\n                children: \"Commenter's Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"col\",\n                children: \"Comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"col\",\n                children: \"Submitted Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: this.state.data.map(each => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"col\",\n                children: each.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"col\",\n                children: each.comment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"col\",\n                \"data-testid\": \"comment_time\",\n                children: timeConverter(each.time)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, this)]\n            }, each.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/yiyaoguo/Desktop/final-project-frontend/src/Comment.js"],"names":["React","Modal","toast","timeConverter","UNIX_timestamp","x","Date","toISOString","slice","replace","validate_form","name","comment","errors","error_name","error_comment","Comment","Component","constructor","props","handleCommentChange","event","setState","target","value","handleNameChange","handleSubmit","preventDefault","state","document","getElementById","style","filter","isModalOpen","fetch","method","body","JSON","stringify","time","getTime","headers","then","response","json","success","history","push","data","componentDidMount","title","sort","a","b","render","map","each","id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modal from \"./Modal\";\nimport { toast } from \"react-toastify\";\nfunction timeConverter(UNIX_timestamp) {\n  let x = new Date(UNIX_timestamp).toISOString().slice(0, 19).replace(\"T\", \" \");\n  return x;\n}\nfunction validate_form(name, comment) {\n  let errors = {\n    error_name: \"\",\n    error_comment: \"\",\n  };\n  if (name === \"\") {\n    errors.error_name = \"Commenter's name cannot be empty\";\n  }\n  if (comment === \"\") {\n    errors.error_comment = \"Comment cannot be empty\";\n  }\n  return errors;\n}\nexport default class Comment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isModalOpen: false,\n      name: \"\",\n      comment: \"\",\n      time: \"\",\n      errors: {\n        error_name: \"\",\n        error_comment: \"\",\n      },\n      data: [],\n    };\n  }\n  handleCommentChange = (event) => {\n    this.setState({\n      comment: event.target.value,\n    });\n  };\n  handleNameChange = (event) => {\n    this.setState({\n      name: event.target.value,\n    });\n  };\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const name = this.state.name;\n    const comment = this.state.comment;\n    const errors = validate_form(name, comment);\n    if (errors.error_comment !== \"\" || errors.error_name !== \"\") {\n      this.setState({\n        errors: {\n          error_name: errors.error_name,\n          error_comment: errors.error_comment,\n        },\n      });\n      return;\n    } else {\n      document.getElementById(\"root\").style.filter = \"blur(0px) grayscale(0%)\";\n      this.setState({\n        isModalOpen: false,\n      });\n      fetch(\"https://itp404-final-project-backend.herokuapp.com/api/comments\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          name: this.state.name,\n          comment: this.state.comment,\n          //   time: Math.round(new Date().getTime() / 1000),\n          time: new Date().getTime(),\n          error_name: \"\",\n          error_comment: \"\",\n        }),\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      })\n        .then((response) => {\n          return response.json();\n        })\n        .then((json) => {\n          toast.success(`Your comment was successfully sent`);\n          this.props.history.push(\"/\");\n          this.props.history.push(\"/comment\");\n        });\n    }\n  };\n  componentDidMount() {\n    document.title = \"Comments\";\n    fetch(\"https://itp404-final-project-backend.herokuapp.com/api/comments\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        this.setState({\n          data: json.sort((a, b) => (a.time < b.time ? 1 : -1)),\n        });\n      });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <button\n          className=\"btn btn-primary\"\n          type=\"button\"\n          onClick={() => {\n            this.setState({ isModalOpen: true });\n            document.getElementById(\"root\").style.filter = \"blur(5px)\";\n          }}\n        >\n          Leave Your Comment Here\n        </button>\n\n        {this.state.isModalOpen && (\n          <Modal\n            title=\"Add a comment\"\n            state={this.state}\n            onClose={() => {\n              document.getElementById(\"root\").style.filter =\n                \"blur(0px) grayscale(0%)\";\n              this.setState({\n                isModalOpen: false,\n                name: \"\",\n                comment: \"\",\n                time: \"\",\n                errors: {\n                  error_name: \"\",\n                  error_comment: \"\",\n                },\n              });\n            }}\n            handleSubmit={this.handleSubmit}\n            handleNameChange={this.handleNameChange}\n            handleCommentChange={this.handleCommentChange}\n          />\n        )}\n        <div className=\"container mx-auto align-center\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr className=\"row\">\n                <th className=\"col\">Commenter's Name</th>\n                <th className=\"col\">Comment</th>\n                <th className=\"col\">Submitted Time</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.data.map((each) => (\n                <tr key={each.id} className=\"row\">\n                  <td className=\"col\">{each.name}</td>\n                  <td className=\"col\">{each.comment}</td>\n                  <td className=\"col\" data-testid=\"comment_time\">\n                    {timeConverter(each.time)}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}