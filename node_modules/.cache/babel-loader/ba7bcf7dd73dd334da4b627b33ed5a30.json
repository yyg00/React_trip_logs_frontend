{"ast":null,"code":"var _jsxFileName = \"/Users/yiyaoguo/Desktop/final-project-frontend/src/CreateLogForm.js\";\nimport React from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction validate_form(continentId, country, year, title) {\n  let errors = {\n    error_continent: \"\",\n    error_country: \"\",\n    error_year: \"\",\n    error_title: \"\"\n  };\n\n  if (continentId === \"\") {\n    errors.error_continent = \"Continent cannot be empty\";\n  }\n\n  if (country === \"\") {\n    errors.error_country = \"Country cannot be empty\";\n  }\n\n  if (title === \"\") {\n    errors.error_title = \"Title cannot be empty\";\n  } //modify later\n  //   if (!Number.isInteger(parseFloat(year))) {\n  //     errors.error_year = \"Year must be an integer in 1980-2021\";\n  //   }\n\n\n  return errors;\n}\n\nexport default class CreateLogForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      continentId: \"\",\n      country: \"\",\n      year: \"\",\n      title: \"\",\n      body: \"\",\n      continents: [],\n      id: \"\",\n      errors: {\n        error_continent: \"\",\n        error_country: \"\",\n        error_year: \"\",\n        error_title: \"\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:4000/api/continents\").then(response => {\n      return response.json();\n    }).then(json => {\n      this.setState({\n        continents: json\n      });\n    });\n    fetch(\"http://localhost:4000/api/logs\").then(response => {\n      return response.json();\n    }).then(json => {\n      // console.log(json);\n      this.setState({\n        id: String(json.length !== 0 ? Math.max(...json.map(each => parseInt(each.id))) + 1 : 0)\n      });\n    });\n  }\n\n  handleCountryChange(event) {\n    this.setState({\n      country: event.target.value\n    });\n  }\n\n  handleYearChange(event) {\n    this.setState({\n      year: event.target.value\n    });\n  }\n\n  handleTitleChange(event) {\n    this.setState({\n      title: event.target.value\n    });\n  }\n\n  handleBodyChange(event) {\n    this.setState({\n      body: event.target.value\n    });\n  }\n\n  handleContinentChange(event) {\n    this.setState({\n      continentId: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const continentId = this.state.continentId;\n    const country = this.state.country;\n    const year = this.state.year;\n    const title = this.state.title;\n    let errors = validate_form(continentId, country, year, title); // console.log(errors);\n\n    if (errors.error_continent !== \"\" || errors.error_country !== \"\" || errors.error_year !== \"\" || errors.error_title !== \"\") {\n      this.setState({\n        errors: {\n          error_continent: errors.error_continent,\n          error_country: errors.error_country,\n          errors_year: errors.error_year,\n          error_title: errors.error_title\n        }\n      }); // console.log(this.state.errors);\n\n      return;\n    } else {\n      fetch(\"http://localhost:4000/api/logs\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          title: this.state.title,\n          body: this.state.body,\n          id: this.state.id,\n          continentId: this.state.continentId,\n          year: this.state.year,\n          country: this.state.country,\n          error_continent: \"\",\n          error_country: \"\",\n          error_year: \"\",\n          error_title: \"\"\n        }),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      }).then(json => {\n        console.log(json);\n        toast.success(`Post: \"${json.title}\" was successfully created`);\n        this.props.history.push(\"/logs\");\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => {\n        this.handleSubmit(event);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-3 form-group required\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"text-sm-right form-label col-2\",\n          htmlFor: \"continent\",\n          children: \"Continent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          id: \"continent\",\n          value: this.state.continentId,\n          onChange: event => {\n            this.handleContinentChange(event);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"--Select Continent--\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), this.state.continents.map(continent => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: continent.id,\n            children: continent.name\n          }, continent.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          children: this.state.errors.error_continent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-3 form-group required\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"country\",\n          className: \"form-label\",\n          children: \"Country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"country\",\n          className: \"form-control\",\n          value: this.state.country,\n          onChange: event => {\n            this.handleCountryChange(event);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          children: this.state.errors.error_country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-3 form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"yaer\",\n          className: \"form-label\",\n          children: \"Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"year\",\n          className: \"form-control\",\n          value: this.state.year,\n          onChange: event => {\n            this.handleYearChange(event);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          children: this.state.errors.error_year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-3 form-group required\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          className: \"form-label\",\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"title\",\n          className: \"form-control\",\n          value: this.state.title,\n          onChange: event => {\n            this.handleTitleChange(event);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          children: this.state.errors.error_title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-3 form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"body\",\n          className: \"form-label\",\n          children: \"Body\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"body\",\n          className: \"form-control\",\n          value: this.state.body,\n          onChange: event => {\n            this.handleBodyChange(event);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Create a new log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/yiyaoguo/Desktop/final-project-frontend/src/CreateLogForm.js"],"names":["React","toast","validate_form","continentId","country","year","title","errors","error_continent","error_country","error_year","error_title","CreateLogForm","Component","constructor","props","state","body","continents","id","componentDidMount","fetch","then","response","json","setState","String","length","Math","max","map","each","parseInt","handleCountryChange","event","target","value","handleYearChange","handleTitleChange","handleBodyChange","handleContinentChange","handleSubmit","preventDefault","errors_year","method","JSON","stringify","headers","console","log","success","history","push","render","continent","name","color"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"./style.css\";\nfunction validate_form(continentId, country, year, title) {\n  let errors = {\n    error_continent: \"\",\n    error_country: \"\",\n    error_year: \"\",\n    error_title: \"\",\n  };\n  if (continentId === \"\") {\n    errors.error_continent = \"Continent cannot be empty\";\n  }\n  if (country === \"\") {\n    errors.error_country = \"Country cannot be empty\";\n  }\n  if (title === \"\") {\n    errors.error_title = \"Title cannot be empty\";\n  }\n  //modify later\n  //   if (!Number.isInteger(parseFloat(year))) {\n  //     errors.error_year = \"Year must be an integer in 1980-2021\";\n  //   }\n\n  return errors;\n}\nexport default class CreateLogForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      continentId: \"\",\n      country: \"\",\n      year: \"\",\n      title: \"\",\n      body: \"\",\n      continents: [],\n      id: \"\",\n      errors: {\n        error_continent: \"\",\n        error_country: \"\",\n        error_year: \"\",\n        error_title: \"\",\n      },\n    };\n  }\n  componentDidMount() {\n    fetch(\"http://localhost:4000/api/continents\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        this.setState({\n          continents: json,\n        });\n      });\n    fetch(\"http://localhost:4000/api/logs\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        // console.log(json);\n        this.setState({\n          id: String(\n            json.length !== 0\n              ? Math.max(...json.map((each) => parseInt(each.id))) + 1\n              : 0\n          ),\n        });\n      });\n  }\n  handleCountryChange(event) {\n    this.setState({\n      country: event.target.value,\n    });\n  }\n  handleYearChange(event) {\n    this.setState({\n      year: event.target.value,\n    });\n  }\n  handleTitleChange(event) {\n    this.setState({\n      title: event.target.value,\n    });\n  }\n  handleBodyChange(event) {\n    this.setState({\n      body: event.target.value,\n    });\n  }\n  handleContinentChange(event) {\n    this.setState({\n      continentId: event.target.value,\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const continentId = this.state.continentId;\n    const country = this.state.country;\n    const year = this.state.year;\n    const title = this.state.title;\n    let errors = validate_form(continentId, country, year, title);\n    // console.log(errors);\n    if (\n      errors.error_continent !== \"\" ||\n      errors.error_country !== \"\" ||\n      errors.error_year !== \"\" ||\n      errors.error_title !== \"\"\n    ) {\n      this.setState({\n        errors: {\n          error_continent: errors.error_continent,\n          error_country: errors.error_country,\n          errors_year: errors.error_year,\n          error_title: errors.error_title,\n        },\n      });\n      // console.log(this.state.errors);\n      return;\n    } else {\n      fetch(\"http://localhost:4000/api/logs\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          title: this.state.title,\n          body: this.state.body,\n          id: this.state.id,\n          continentId: this.state.continentId,\n          year: this.state.year,\n          country: this.state.country,\n          error_continent: \"\",\n          error_country: \"\",\n          error_year: \"\",\n          error_title: \"\",\n        }),\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      })\n        .then((response) => {\n          return response.json();\n        })\n        .then((json) => {\n          console.log(json);\n          toast.success(`Post: \"${json.title}\" was successfully created`);\n          this.props.history.push(\"/logs\");\n        });\n    }\n  }\n  render() {\n    return (\n      <form\n        onSubmit={(event) => {\n          this.handleSubmit(event);\n        }}\n      >\n        <div className=\"my-3 form-group required\">\n          <label className=\"text-sm-right form-label col-2\" htmlFor=\"continent\">\n            Continent\n          </label>\n          <select\n            className=\"form-select\"\n            id=\"continent\"\n            value={this.state.continentId}\n            onChange={(event) => {\n              this.handleContinentChange(event);\n            }}\n          >\n            <option>--Select Continent--</option>\n            {this.state.continents.map((continent) => (\n              <option key={continent.id} value={continent.id}>\n                {continent.name}\n              </option>\n            ))}\n          </select>\n          <span style={{ color: \"red\" }}>\n            {this.state.errors.error_continent}\n          </span>\n        </div>\n        <div className=\"my-3 form-group required\">\n          <label htmlFor=\"country\" className=\"form-label\">\n            Country\n          </label>\n          <input\n            id=\"country\"\n            className=\"form-control\"\n            value={this.state.country}\n            onChange={(event) => {\n              this.handleCountryChange(event);\n            }}\n          />\n          <span style={{ color: \"red\" }}>\n            {this.state.errors.error_country}\n          </span>\n        </div>\n        <div className=\"my-3 form-group\">\n          <label htmlFor=\"yaer\" className=\"form-label\">\n            Year\n          </label>\n          <input\n            id=\"year\"\n            className=\"form-control\"\n            value={this.state.year}\n            onChange={(event) => {\n              this.handleYearChange(event);\n            }}\n          />\n          <span style={{ color: \"red\" }}>{this.state.errors.error_year}</span>\n        </div>\n        <div className=\"my-3 form-group required\">\n          <label htmlFor=\"title\" className=\"form-label\">\n            Title\n          </label>\n          <input\n            id=\"title\"\n            className=\"form-control\"\n            value={this.state.title}\n            onChange={(event) => {\n              this.handleTitleChange(event);\n            }}\n          />\n          <span style={{ color: \"red\" }}>{this.state.errors.error_title}</span>\n        </div>\n        <div className=\"my-3 form-group\">\n          <label htmlFor=\"body\" className=\"form-label\">\n            Body\n          </label>\n          <textarea\n            id=\"body\"\n            className=\"form-control\"\n            value={this.state.body}\n            onChange={(event) => {\n              this.handleBodyChange(event);\n            }}\n          ></textarea>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Create a new log\n        </button>\n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}