{"ast":null,"code":"var _jsxFileName = \"/Users/yiyaoguo/Desktop/final-project-frontend/src/Comment.js\";\nimport React from \"react\";\nimport \"./style.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modal from \"./Modal\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction timeConverter(UNIX_timestamp) {\n  var a = new Date(UNIX_timestamp * 1000);\n  var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  var year = a.getFullYear();\n  var month = months[a.getMonth()];\n  var date = a.getDate();\n  var hour = a.getHours();\n  var min = a.getMinutes();\n  var sec = a.getSeconds();\n  var time = date + \" \" + month + \" \" + year + \" \" + hour + \":\" + min + \":\" + sec; //   let x = new Date(UNIX_timestamp * 1000)\n  //     .toISOString()\n  //     .slice(0, 19)\n  //     .replace(\"T\", \" \");\n\n  let x = new Date(UNIX_timestamp).toUTCString();\n  return x;\n}\n\nfunction validate_form(name, comment) {\n  let errors = {\n    error_name: \"\",\n    error_comment: \"\"\n  };\n\n  if (name === \"\") {\n    errors.error_name = \"Commenter's name cannot be empty\";\n  }\n\n  if (comment === \"\") {\n    errors.error_comment = \"Comment cannot be empty\";\n  }\n\n  return errors;\n}\n\nexport default class Comment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCommentChange = event => {\n      this.setState({\n        comment: event.target.value\n      });\n    };\n\n    this.handleNameChange = event => {\n      this.setState({\n        name: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const name = this.state.name;\n      const comment = this.state.comment;\n      const errors = validate_form(name, comment);\n\n      if (errors.error_comment !== \"\" || errors.error_name !== \"\") {\n        this.setState({\n          errors: {\n            error_name: errors.error_name,\n            error_comment: errors.error_comment\n          }\n        });\n        return;\n      } else {\n        this.setState({\n          isModalOpen: false\n        });\n        fetch(\"http://localhost:4000/api/comments\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            name: this.state.name,\n            comment: this.state.comment,\n            time: Math.round(new Date().getTime() / 1000),\n            error_name: \"\",\n            error_comment: \"\"\n          }),\n          headers: {\n            \"Content-type\": \"application/json\"\n          }\n        }).then(response => {\n          return response.json();\n        }).then(json => {\n          console.log(json);\n          toast.success(`Your comment was successfully sent`);\n          this.props.history.push(\"/\");\n          this.props.history.push(\"/comment\");\n        });\n      }\n    };\n\n    this.state = {\n      isModalOpen: false,\n      name: \"\",\n      comment: \"\",\n      time: \"\",\n      errors: {\n        error_name: \"\",\n        error_comment: \"\"\n      },\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    document.title = \"Comments\";\n    fetch(\"http://localhost:4000/api/comments\").then(response => {\n      return response.json();\n    }).then(json => {\n      this.setState({\n        data: json.sort((a, b) => a.time < b.time ? 1 : -1)\n      });\n      console.log(this.state.data);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        type: \"button\",\n        onClick: () => {\n          this.setState({\n            isModalOpen: true\n          });\n        },\n        children: \"Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), this.state.isModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n        title: \"Add a comment\",\n        state: this.state,\n        onClose: () => {\n          this.setState({\n            isModalOpen: false,\n            name: \"\",\n            comment: \"\",\n            time: \"\",\n            errors: {\n              error_name: \"\",\n              error_comment: \"\"\n            }\n          });\n        },\n        handleSubmit: this.handleSubmit,\n        handleNameChange: this.handleNameChange,\n        handleCommentChange: this.handleCommentChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto align-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"col\",\n              children: \"Commenter's Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"col\",\n              children: \"Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"col\",\n              children: \"Submitted Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.state.data.map(each => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"col\",\n              children: each.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"col\",\n              children: each.comment\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"col\",\n              children: timeConverter(each.time)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 17\n            }, this)]\n          }, each.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/yiyaoguo/Desktop/final-project-frontend/src/Comment.js"],"names":["React","Modal","toast","timeConverter","UNIX_timestamp","a","Date","months","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","time","x","toUTCString","validate_form","name","comment","errors","error_name","error_comment","Comment","Component","constructor","props","handleCommentChange","event","setState","target","value","handleNameChange","handleSubmit","preventDefault","state","isModalOpen","fetch","method","body","JSON","stringify","Math","round","getTime","headers","then","response","json","console","log","success","history","push","data","componentDidMount","document","title","sort","b","render","map","each","id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modal from \"./Modal\";\nimport { toast } from \"react-toastify\";\nfunction timeConverter(UNIX_timestamp) {\n  var a = new Date(UNIX_timestamp * 1000);\n  var months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  var year = a.getFullYear();\n  var month = months[a.getMonth()];\n  var date = a.getDate();\n  var hour = a.getHours();\n  var min = a.getMinutes();\n  var sec = a.getSeconds();\n  var time =\n    date + \" \" + month + \" \" + year + \" \" + hour + \":\" + min + \":\" + sec;\n  //   let x = new Date(UNIX_timestamp * 1000)\n  //     .toISOString()\n  //     .slice(0, 19)\n  //     .replace(\"T\", \" \");\n  let x = new Date(UNIX_timestamp).toUTCString();\n  return x;\n}\nfunction validate_form(name, comment) {\n  let errors = {\n    error_name: \"\",\n    error_comment: \"\",\n  };\n  if (name === \"\") {\n    errors.error_name = \"Commenter's name cannot be empty\";\n  }\n  if (comment === \"\") {\n    errors.error_comment = \"Comment cannot be empty\";\n  }\n  return errors;\n}\nexport default class Comment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isModalOpen: false,\n      name: \"\",\n      comment: \"\",\n      time: \"\",\n      errors: {\n        error_name: \"\",\n        error_comment: \"\",\n      },\n      data: [],\n    };\n  }\n  handleCommentChange = (event) => {\n    this.setState({\n      comment: event.target.value,\n    });\n  };\n  handleNameChange = (event) => {\n    this.setState({\n      name: event.target.value,\n    });\n  };\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const name = this.state.name;\n    const comment = this.state.comment;\n    const errors = validate_form(name, comment);\n    if (errors.error_comment !== \"\" || errors.error_name !== \"\") {\n      this.setState({\n        errors: {\n          error_name: errors.error_name,\n          error_comment: errors.error_comment,\n        },\n      });\n      return;\n    } else {\n      this.setState({\n        isModalOpen: false,\n      });\n      fetch(\"http://localhost:4000/api/comments\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          name: this.state.name,\n          comment: this.state.comment,\n          time: Math.round(new Date().getTime() / 1000),\n          error_name: \"\",\n          error_comment: \"\",\n        }),\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      })\n        .then((response) => {\n          return response.json();\n        })\n        .then((json) => {\n          console.log(json);\n          toast.success(`Your comment was successfully sent`);\n          this.props.history.push(\"/\");\n          this.props.history.push(\"/comment\");\n        });\n    }\n  };\n  componentDidMount() {\n    document.title = \"Comments\";\n    fetch(\"http://localhost:4000/api/comments\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        this.setState({\n          data: json.sort((a, b) => (a.time < b.time ? 1 : -1)),\n        });\n        console.log(this.state.data);\n      });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <button\n          className=\"btn btn-primary\"\n          type=\"button\"\n          onClick={() => {\n            this.setState({ isModalOpen: true });\n          }}\n        >\n          Comment\n        </button>\n\n        {this.state.isModalOpen && (\n          <Modal\n            title=\"Add a comment\"\n            state={this.state}\n            onClose={() => {\n              this.setState({\n                isModalOpen: false,\n                name: \"\",\n                comment: \"\",\n                time: \"\",\n                errors: {\n                  error_name: \"\",\n                  error_comment: \"\",\n                },\n              });\n            }}\n            handleSubmit={this.handleSubmit}\n            handleNameChange={this.handleNameChange}\n            handleCommentChange={this.handleCommentChange}\n          />\n        )}\n        <div className=\"container mx-auto align-center\">\n          <thead>\n            <tr className=\"row\">\n              <th className=\"col\">Commenter's Name</th>\n              <th className=\"col\">Comment</th>\n              <th className=\"col\">Submitted Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.data.map((each) => (\n              <tr key={each.id} className=\"row\">\n                <td className=\"col\">{each.name}</td>\n                <td className=\"col\">{each.comment}</td>\n                <td className=\"col\">{timeConverter(each.time)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}