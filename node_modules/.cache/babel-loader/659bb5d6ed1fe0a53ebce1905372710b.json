{"ast":null,"code":"var _jsxFileName = \"/Users/yiyaoguo/Desktop/final-project-frontend/src/SortableTable.js\";\nimport React from \"react\";\nimport sortBy from \"lodash.sortby\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SortableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      rows,\n      defaultSort\n    } = this.props;\n    const [defaultSortedField, defaultSortDirection] = defaultSort.split(\":\");\n    let initialSortedRows = sortBy(rows, [defaultSortedField]);\n\n    if (defaultSortDirection === \"desc\") {\n      initialSortedRows = initialSortedRows.reverse();\n    }\n\n    this.state = {\n      currentSortedField: defaultSortedField,\n      currentSortDirection: defaultSortDirection,\n      sortedRows: initialSortedRows\n    };\n  }\n\n  sortRows(field) {\n    const {\n      rows\n    } = this.props;\n    const {\n      currentSortedField,\n      currentSortDirection\n    } = this.state;\n\n    if (field === currentSortedField) {\n      if (currentSortDirection === \"asc\") {\n        this.setState({\n          currentSortDirection: \"desc\",\n          sortedRows: sortBy(rows, [currentSortedField]).reverse()\n        });\n      } else {\n        this.setState({\n          currentSortDirection: \"asc\",\n          sortedRows: sortBy(rows, [currentSortedField])\n        });\n      }\n    } else {\n      this.setState({\n        currentSortedField: field,\n        currentSortDirection: \"asc\",\n        sortedRows: sortBy(rows, [field])\n      });\n    }\n  }\n\n  render() {\n    const {\n      columns\n    } = this.props;\n    const {\n      currentSortedField,\n      currentSortDirection,\n      sortedRows\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: columns.map(_ref => {\n            let {\n              field,\n              header\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(\"th\", {\n              \"data-testid\": `th-${field}`,\n              onClick: () => {\n                this.sortRows(field);\n              },\n              children: [header, \" \", currentSortedField === field && `(${currentSortDirection})`]\n            }, field, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: sortedRows.map((row, i) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: columns.map(_ref2 => {\n              let {\n                field\n              } = _ref2;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                \"data-testid\": `td-${field}-${i}`,\n                children: row[field]\n              }, field, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 21\n              }, this);\n            })\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/yiyaoguo/Desktop/final-project-frontend/src/SortableTable.js"],"names":["React","sortBy","SortableTable","Component","constructor","props","rows","defaultSort","defaultSortedField","defaultSortDirection","split","initialSortedRows","reverse","state","currentSortedField","currentSortDirection","sortedRows","sortRows","field","setState","render","columns","map","header","row","i"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport sortBy from \"lodash.sortby\";\n\nexport default class SortableTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { rows, defaultSort } = this.props;\n    const [defaultSortedField, defaultSortDirection] = defaultSort.split(\":\");\n\n    let initialSortedRows = sortBy(rows, [defaultSortedField]);\n\n    if (defaultSortDirection === \"desc\") {\n      initialSortedRows = initialSortedRows.reverse();\n    }\n\n    this.state = {\n      currentSortedField: defaultSortedField,\n      currentSortDirection: defaultSortDirection,\n      sortedRows: initialSortedRows,\n    };\n  }\n\n  sortRows(field) {\n    const { rows } = this.props;\n    const { currentSortedField, currentSortDirection } = this.state;\n\n    if (field === currentSortedField) {\n      if (currentSortDirection === \"asc\") {\n        this.setState({\n          currentSortDirection: \"desc\",\n          sortedRows: sortBy(rows, [currentSortedField]).reverse(),\n        });\n      } else {\n        this.setState({\n          currentSortDirection: \"asc\",\n          sortedRows: sortBy(rows, [currentSortedField]),\n        });\n      }\n    } else {\n      this.setState({\n        currentSortedField: field,\n        currentSortDirection: \"asc\",\n        sortedRows: sortBy(rows, [field]),\n      });\n    }\n  }\n\n  render() {\n    const { columns } = this.props;\n    const { currentSortedField, currentSortDirection, sortedRows } = this.state;\n\n    return (\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            {columns.map(({ field, header }) => {\n              return (\n                <th\n                  key={field}\n                  data-testid={`th-${field}`}\n                  onClick={() => {\n                    this.sortRows(field);\n                  }}\n                >\n                  {header}{\" \"}\n                  {currentSortedField === field && `(${currentSortDirection})`}\n                </th>\n              );\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {sortedRows.map((row, i) => {\n            return (\n              <tr key={i}>\n                {columns.map(({ field }) => {\n                  return (\n                    <td key={field} data-testid={`td-${field}-${i}`}>\n                      {row[field]}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}