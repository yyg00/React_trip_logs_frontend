{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\"; // import sortBy from \"lodash.sortby\";\n\nconst useSortableData = function (items) {\n  _s();\n\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const [sortConfig, setSortConfig] = React.useState(config);\n  const sortedItems = React.useMemo(() => {\n    let sortableItems = [...items];\n    console.log(sortableItems);\n\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n\n        return 0;\n      });\n    }\n\n    return sortableItems;\n  }, [items, sortConfig]);\n\n  const requestSort = key => {\n    let direction = \"ascending\";\n\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === \"ascending\") {\n      direction = \"descending\";\n    }\n\n    setSortConfig({\n      key,\n      direction\n    });\n  };\n\n  return {\n    items: sortedItems,\n    requestSort,\n    sortConfig\n  };\n}; // export default class SortableTable extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     const { rows, defaultSort } = this.props;\n//     const [defaultSortedField, defaultSortDirection] = defaultSort.split(\":\");\n//     let initialSortedRows = sortBy(rows, [defaultSortedField]);\n//     if (defaultSortDirection === \"desc\") {\n//       initialSortedRows = initialSortedRows.reverse();\n//     }\n//     this.state = {\n//       currentSortedField: defaultSortedField,\n//       currentSortDirection: defaultSortDirection,\n//       sortedRows: initialSortedRows\n//     };\n//   }\n//   sortRows(field) {\n//     const { rows } = this.props;\n//     const { currentSortedField, currentSortDirection } = this.state;\n//     if (field === currentSortedField) {\n//       if (currentSortDirection === \"asc\") {\n//         this.setState({\n//           currentSortDirection: \"desc\",\n//           sortedRows: sortBy(rows, [currentSortedField]).reverse()\n//         });\n//       } else {\n//         this.setState({\n//           currentSortDirection: \"asc\",\n//           sortedRows: sortBy(rows, [currentSortedField])\n//         });\n//       }\n//     } else {\n//       this.setState({\n//         currentSortedField: field,\n//         currentSortDirection: \"asc\",\n//         sortedRows: sortBy(rows, [field])\n//       });\n//     }\n//   }\n//   render() {\n//     const { columns } = this.props;\n//     const { currentSortedField, currentSortDirection, sortedRows } = this.state;\n//     return (\n//       <table className=\"table table-striped\">\n//         <thead>\n//           <tr>\n//             {columns.map(({ field, header }) => {\n//               return (\n//                 <th\n//                   key={field}\n//                   data-testid={`th-${field}`}\n//                   onClick={() => {\n//                     this.sortRows(field);\n//                   }}\n//                 >\n//                   {header}{\" \"}\n//                   {currentSortedField === field && `(${currentSortDirection})`}\n//                 </th>\n//               );\n//             })}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {sortedRows.map((row, i) => {\n//             return (\n//               <tr key={i}>\n//                 {columns.map(({ field }) => {\n//                   return (\n//                     <td key={field} data-testid={`td-${field}-${i}`}>\n//                       {row[field]}\n//                     </td>\n//                   );\n//                 })}\n//               </tr>\n//             );\n//           })}\n//         </tbody>\n//       </table>\n//     );\n//   }\n// }\n\n\n_s(useSortableData, \"RK+7Z8/M5Gu9u9DrSbX+5MpLDnQ=\");","map":{"version":3,"sources":["/Users/yiyaoguo/Desktop/final-project-frontend/src/SortableTable.js"],"names":["React","useSortableData","items","config","sortConfig","setSortConfig","useState","sortedItems","useMemo","sortableItems","console","log","sort","a","b","key","direction","requestSort"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,MAAMC,eAAe,GAAG,UAACC,KAAD,EAA0B;AAAA;;AAAA,MAAlBC,MAAkB,uEAAT,IAAS;AAChD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,KAAK,CAACM,QAAN,CAAeH,MAAf,CAApC;AAEA,QAAMI,WAAW,GAAGP,KAAK,CAACQ,OAAN,CAAc,MAAM;AACtC,QAAIC,aAAa,GAAG,CAAC,GAAGP,KAAJ,CAApB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;;AACA,QAAIL,UAAU,KAAK,IAAnB,EAAyB;AACvBK,MAAAA,aAAa,CAACG,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC3B,YAAID,CAAC,CAACT,UAAU,CAACW,GAAZ,CAAD,GAAoBD,CAAC,CAACV,UAAU,CAACW,GAAZ,CAAzB,EAA2C;AACzC,iBAAOX,UAAU,CAACY,SAAX,KAAyB,WAAzB,GAAuC,CAAC,CAAxC,GAA4C,CAAnD;AACD;;AACD,YAAIH,CAAC,CAACT,UAAU,CAACW,GAAZ,CAAD,GAAoBD,CAAC,CAACV,UAAU,CAACW,GAAZ,CAAzB,EAA2C;AACzC,iBAAOX,UAAU,CAACY,SAAX,KAAyB,WAAzB,GAAuC,CAAvC,GAA2C,CAAC,CAAnD;AACD;;AACD,eAAO,CAAP;AACD,OARD;AASD;;AACD,WAAOP,aAAP;AACD,GAfmB,EAejB,CAACP,KAAD,EAAQE,UAAR,CAfiB,CAApB;;AAiBA,QAAMa,WAAW,GAAIF,GAAD,IAAS;AAC3B,QAAIC,SAAS,GAAG,WAAhB;;AACA,QACEZ,UAAU,IACVA,UAAU,CAACW,GAAX,KAAmBA,GADnB,IAEAX,UAAU,CAACY,SAAX,KAAyB,WAH3B,EAIE;AACAA,MAAAA,SAAS,GAAG,YAAZ;AACD;;AACDX,IAAAA,aAAa,CAAC;AAAEU,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAD,CAAb;AACD,GAVD;;AAYA,SAAO;AAAEd,IAAAA,KAAK,EAAEK,WAAT;AAAsBU,IAAAA,WAAtB;AAAmCb,IAAAA;AAAnC,GAAP;AACD,CAjCD,C,CAkCA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAzHMH,e","sourcesContent":["import React from \"react\";\n// import sortBy from \"lodash.sortby\";\nconst useSortableData = (items, config = null) => {\n  const [sortConfig, setSortConfig] = React.useState(config);\n\n  const sortedItems = React.useMemo(() => {\n    let sortableItems = [...items];\n    console.log(sortableItems);\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [items, sortConfig]);\n\n  const requestSort = (key) => {\n    let direction = \"ascending\";\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === \"ascending\"\n    ) {\n      direction = \"descending\";\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return { items: sortedItems, requestSort, sortConfig };\n};\n// export default class SortableTable extends React.Component {\n//   constructor(props) {\n//     super(props);\n\n//     const { rows, defaultSort } = this.props;\n//     const [defaultSortedField, defaultSortDirection] = defaultSort.split(\":\");\n\n//     let initialSortedRows = sortBy(rows, [defaultSortedField]);\n\n//     if (defaultSortDirection === \"desc\") {\n//       initialSortedRows = initialSortedRows.reverse();\n//     }\n\n//     this.state = {\n//       currentSortedField: defaultSortedField,\n//       currentSortDirection: defaultSortDirection,\n//       sortedRows: initialSortedRows\n//     };\n//   }\n\n//   sortRows(field) {\n//     const { rows } = this.props;\n//     const { currentSortedField, currentSortDirection } = this.state;\n\n//     if (field === currentSortedField) {\n//       if (currentSortDirection === \"asc\") {\n//         this.setState({\n//           currentSortDirection: \"desc\",\n//           sortedRows: sortBy(rows, [currentSortedField]).reverse()\n//         });\n//       } else {\n//         this.setState({\n//           currentSortDirection: \"asc\",\n//           sortedRows: sortBy(rows, [currentSortedField])\n//         });\n//       }\n//     } else {\n//       this.setState({\n//         currentSortedField: field,\n//         currentSortDirection: \"asc\",\n//         sortedRows: sortBy(rows, [field])\n//       });\n//     }\n//   }\n\n//   render() {\n//     const { columns } = this.props;\n//     const { currentSortedField, currentSortDirection, sortedRows } = this.state;\n\n//     return (\n//       <table className=\"table table-striped\">\n//         <thead>\n//           <tr>\n//             {columns.map(({ field, header }) => {\n//               return (\n//                 <th\n//                   key={field}\n//                   data-testid={`th-${field}`}\n//                   onClick={() => {\n//                     this.sortRows(field);\n//                   }}\n//                 >\n//                   {header}{\" \"}\n//                   {currentSortedField === field && `(${currentSortDirection})`}\n//                 </th>\n//               );\n//             })}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {sortedRows.map((row, i) => {\n//             return (\n//               <tr key={i}>\n//                 {columns.map(({ field }) => {\n//                   return (\n//                     <td key={field} data-testid={`td-${field}-${i}`}>\n//                       {row[field]}\n//                     </td>\n//                   );\n//                 })}\n//               </tr>\n//             );\n//           })}\n//         </tbody>\n//       </table>\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}