{"ast":null,"code":"var _jsxFileName = \"/Users/yiyaoguo/Desktop/final-project-frontend/src/Comment.js\";\nimport React from \"react\";\nimport \"./style.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modal from \"./Modal\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction validate_form(name, comment) {\n  let errors = {\n    error_name: \"\",\n    error_comment: \"\"\n  };\n\n  if (name === \"\") {\n    errors.error_name = \"Commenter's name cannot be empty\";\n  }\n\n  if (comment === \"\") {\n    errors.error_comment = \"Comment cannot be empty\";\n  }\n}\n\nexport default class Comment extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false,\n      name: \"\",\n      comment: \"\",\n      time: \"\",\n      errors: {\n        error_name: \"\",\n        error_comment: \"\"\n      }\n    };\n  }\n\n  handleCommentChange(event) {\n    this.setState({\n      name: event.target.value\n    });\n  }\n\n  handleNameChange(event) {\n    this.setState({\n      comment: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const name = this.state.name;\n    const comment = this.state.comment;\n    const errors = validate_form(name, comment);\n\n    if (errors.error_comment !== \"\" || errors.error_name !== \"\") {\n      this.setState({\n        errors: {\n          error_name: errors.error_name,\n          error_comment: errors.error_comment\n        }\n      });\n      return;\n    } else {\n      fetch(\"http://localhost:4000/api/comments\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          name: this.state.name,\n          comment: this.state.comment,\n          time: new Date().getTime(),\n          error_name: \"\",\n          error_comment: \"\"\n        }),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      }).then(json => {\n        console.log(json);\n        toast.success(`Post: \"${json.title}\" was successfully created`);\n        this.props.history.push(\"/comment\");\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        type: \"button\",\n        onClick: () => {\n          this.setState({\n            isModalOpen: true\n          });\n        },\n        children: \"Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), this.state.isModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n        title: \"Add a comment\",\n        body: () => {\n          return /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: event => {\n              this.handleSubmit(event);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-sm-right form-label\",\n              htmlFor: \"name\",\n              children: \"Commentor's name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              type: \"text\",\n              value: this.state.name,\n              onChange: event => {\n                this.handleNameChange(event);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-sm-right form-label\",\n              htmlFor: \"name\",\n              children: \"Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: this.state.comment,\n              className: \"form-control\",\n              onChange: event => {\n                this.handleCommentChange(event);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this);\n        },\n        onClose: () => {\n          this.setState({\n            isModalOpen: false\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/yiyaoguo/Desktop/final-project-frontend/src/Comment.js"],"names":["React","Modal","toast","validate_form","name","comment","errors","error_name","error_comment","Comment","Component","constructor","props","state","isModalOpen","time","handleCommentChange","event","setState","target","value","handleNameChange","handleSubmit","preventDefault","fetch","method","body","JSON","stringify","Date","getTime","headers","then","response","json","console","log","success","title","history","push","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modal from \"./Modal\";\nimport { toast } from \"react-toastify\";\nfunction validate_form(name, comment) {\n  let errors = {\n    error_name: \"\",\n    error_comment: \"\",\n  };\n  if (name === \"\") {\n    errors.error_name = \"Commenter's name cannot be empty\";\n  }\n  if (comment === \"\") {\n    errors.error_comment = \"Comment cannot be empty\";\n  }\n}\nexport default class Comment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isModalOpen: false,\n      name: \"\",\n      comment: \"\",\n      time: \"\",\n      errors: {\n        error_name: \"\",\n        error_comment: \"\",\n      },\n    };\n  }\n  handleCommentChange(event) {\n    this.setState({\n      name: event.target.value,\n    });\n  }\n  handleNameChange(event) {\n    this.setState({\n      comment: event.target.value,\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    const name = this.state.name;\n    const comment = this.state.comment;\n    const errors = validate_form(name, comment);\n    if (errors.error_comment !== \"\" || errors.error_name !== \"\") {\n      this.setState({\n        errors: {\n          error_name: errors.error_name,\n          error_comment: errors.error_comment,\n        },\n      });\n      return;\n    } else {\n      fetch(\"http://localhost:4000/api/comments\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          name: this.state.name,\n          comment: this.state.comment,\n          time: new Date().getTime(),\n          error_name: \"\",\n          error_comment: \"\",\n        }),\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      })\n        .then((response) => {\n          return response.json();\n        })\n        .then((json) => {\n          console.log(json);\n          toast.success(`Post: \"${json.title}\" was successfully created`);\n          this.props.history.push(\"/comment\");\n        });\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <button\n          className=\"btn btn-primary\"\n          type=\"button\"\n          onClick={() => {\n            this.setState({ isModalOpen: true });\n          }}\n        >\n          Comment\n        </button>\n\n        {this.state.isModalOpen && (\n          <Modal\n            title=\"Add a comment\"\n            body={() => {\n              return (\n                <form\n                  onSubmit={(event) => {\n                    this.handleSubmit(event);\n                  }}\n                >\n                  <label className=\"text-sm-right form-label\" htmlFor=\"name\">\n                    Commentor's name\n                  </label>\n                  <input\n                    className=\"form-control\"\n                    type=\"text\"\n                    value={this.state.name}\n                    onChange={(event) => {\n                      this.handleNameChange(event);\n                    }}\n                  />\n                  <label className=\"text-sm-right form-label\" htmlFor=\"name\">\n                    Comment\n                  </label>\n                  <textarea\n                    value={this.state.comment}\n                    className=\"form-control\"\n                    onChange={(event) => {\n                      this.handleCommentChange(event);\n                    }}\n                  />\n                </form>\n              );\n            }}\n            onClose={() => {\n              this.setState({ isModalOpen: false });\n            }}\n          />\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}